// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Follow this instruction instead this property: https://www.npmjs.com/package/zod-prisma-types#custom-imports
// imports       = "./zod-utils"
generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  createRelationValuesTypes = true
  addIncludeType            = false
  addSelectType             = false
}

generator enums {
  provider = "ts-node --transpile-only ./enum-generator"
}

enum UserRole {
  ADMIN
  USER
  STAFF
}

enum CarriageStatus {
  HAS_SEAT
  FULL
}

enum IdentityProvider {
  INTERNAL
  GOOGLE
  // SAML
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  username           String?
  email              String           @unique
  emailVerified      DateTime?
  password           String?
  role               UserRole         @default(USER)
  verificationCode   String?          @unique @db.Text
  identityProvider   IdentityProvider @default(INTERNAL)
  identityProviderId String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map("users")
}

model Route {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  depart_station String?
  arrive_station String?
  depart_time    String?
  arrive_time    String?
  depart_day     String?

  @@map("routes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime

  @@map("reset-password-requests")
}

model Station {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?

  journeyStations JourneyStation[]

  pricingDeparts  Pricing[] @relation("pricingDeparts") @ignore
  pricingArrivals Pricing[] @relation("pricingArrivals") @ignore

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stations")
}

model SeatType {
  id          Int    @id @default(autoincrement())
  name        String
  floors      Int    @default(1) //1 for bed, >1 for chair
  seatsPerRow Int

  carriages Carriage[]
  pricings  Pricing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seat-types")
}

model Seat {
  id         Int       @id @default(autoincrement())
  carriageId Int
  carriage   Carriage? @relation(fields: [carriageId], references: [id], onDelete: Cascade)
  order      Int

  ticket Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seats")
}

model Carriage {
  id            Int            @id @default(autoincrement())
  seatTypeId    Int
  seatType      SeatType       @relation(fields: [seatTypeId], references: [id], onDelete: Cascade)
  trainId       Int
  train         Train          @relation(fields: [trainId], references: [id], onDelete: Cascade)
  code          String         @unique
  name          String
  note          String?
  status        CarriageStatus @default(HAS_SEAT)
  order         Int
  numOfCabins   Int?           @default(1)
  seatsPerCabin Int
  seats         Seat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carriages")
}

model Train {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  name      String
  carriages Carriage[]

  trips   Trip[]
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trains")
}

model Journey {
  id   Int    @id @default(autoincrement())
  name String

  journeyStations JourneyStation[]
  trips           Trip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journeys")
}

model JourneyStation {
  id        Int     @id @default(autoincrement())
  journeyId Int
  journey   Journey @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  stationId Int
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  order     Int

  tripTimelines TripTimeline[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([journeyId, stationId])
  @@unique([journeyId, order])
  @@map("journey-schedules")
}

model Trip {
  id          Int      @id @default(autoincrement())
  name        String?
  journeyId   Int
  journey     Journey  @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  trainId     Int
  train       Train    @relation(fields: [trainId], references: [id], onDelete: Cascade)
  arrivalDate DateTime
  departDate  DateTime

  pricings  Pricing[]
  timelines TripTimeline[]
  tickets   Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([journeyId, trainId, arrivalDate])
  @@unique([journeyId, trainId, departDate])
  @@map("trips")
}

model TripTimeline {
  id               Int            @id @default(autoincrement())
  tripId           Int
  trip             Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  journeyStationId Int
  journeyStation   JourneyStation @relation(fields: [journeyStationId], references: [id], onDelete: Cascade)
  arrivalDate      DateTime
  departDate       DateTime

  ticketsFrom Ticket[] @relation(name: "fromTimeline")
  ticketsTo   Ticket[] @relation(name: "toTimeline")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trip-timelines")
}

model Pricing {
  id               Int      @id @default(autoincrement())
  tripId           Int
  trip             Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  seatTypeId       Int
  seatType         SeatType @relation(fields: [seatTypeId], references: [id], onDelete: Cascade)
  departStationId  Int
  departStation    Station  @relation(name: "pricingDeparts", fields: [departStationId], references: [id], onDelete: Cascade)
  arrivalStationId Int
  arrivalStation   Station  @relation(name: "pricingArrivals", fields: [arrivalStationId], references: [id], onDelete: Cascade)
  amount           Int

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tripId, departStationId, arrivalStationId, seatTypeId])
  @@map("pricings")
}

model Ticket {
  id             Int          @id @default(autoincrement())
  arrivalDate    DateTime
  tripId         Int
  trip           Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  trainId        Int
  train          Train        @relation(fields: [trainId], references: [id], onDelete: Cascade)
  seatId         Int
  seat           Seat         @relation(fields: [seatId], references: [id], onDelete: Cascade)
  fromTimelineId Int
  fromTineline   TripTimeline @relation(name: "fromTimeline", fields: [fromTimelineId], references: [id], onDelete: Cascade)
  toTimelineId   Int
  toTineline     TripTimeline @relation(name: "toTimeline", fields: [toTimelineId], references: [id], onDelete: Cascade)
  priceId        Int
  price          Pricing      @relation(fields: [priceId], references: [id])
  // TODO:
}
